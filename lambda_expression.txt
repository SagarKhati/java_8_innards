Lambda Expression
==================
It is an anonymous function 
 anonymous -> (Nameless, without return type, without modifiers)
first step into functional programming
anonymous function that doesnt have name and doesnt belong to any class
provides clear and concise way to represent a method interface via an expression
provides the implementation of functional interface & simplifies the software programming


SYNTAX:
=======
parameter -> expression body

Optional Type Declaration
Optional Parenthesis Arond Parameter
Optional Curly Braces
Optional return keyword


Lambda Parameters:
==================
Zero Parameters     () -> System.out.println("Zero parameter lambda");
One Parameter       (param) -> System.out.println("One parameter: " + param)
Multiple Parameters  (p1, p2) -> System.out.println("Multiple parameters: " + p1 + ", " + p2)


Example:
========
pubic void m1() { System.out.println("Hello"); }

() -> { System.out.println("Hello") };
() -> System.out.println("Hello");
--------------------------------------------------------------------
public void m1(int a, int b) { System.out.println(a+b); }

(a, b) -> { System.out.println(a+b); }
(a, b) -> System.out.println(a+b);
--------------------------------------------------------------------
public int squareIt(int n) { return n*n; }

(n) -> { return n*n; }
(n) -> n*n;
n -> n*n;
---------------------------------------------------------------------
public void m1(String s) { return s.length(); }

s -> s.length();


Lambda Expression with Functional Interface:
============================================
interface Interf {
public void m1();
}
class Demo implements Interf {
public void m1() {
System.out.println("Hello...");
}
}
class Test {
public static void main(String[] args) {
Demo d = new Demo();
d.m1();
}
}
---------------------------------------------------------------------
interface Interf {
public void m1();
}
class Demo implements Interf {
public void m1() {
System.out.println("Hello...");
}
}
class Test {
public static void main(String[] args) {
Interf i = new Demo();
i.m1();
}
}
----------------------------------------------------------------------
interface Interf {
public void m1();
}
class Test {
public static void main(String[] args) {
Interf i = () -> System.out.println("Hello...");
i.m1();
i.m1();
i.m1();
i.m1();
}
}
--------------------------------------------------------------------------
interface Interf {
public void add(int a, int b);
}
class Demo implements Interf {
public void add(int a, int b) {
System.out.println("The Sum: "+(a+b));
}
}
class Test {
public static void main(String[] args) {
Interf i = new Demo();
i.add(10,20);
}
}
---------------------------------------------------------------------------
interface Interf {
public void add(int a, int b);
}
class Test {
public static void main(String[] args) {
Interf i = (a, b) -> System.out.println("The Sum: "+(a+b));
i.add(10,20);
i.add(100,200);
i.add(1000,2000);
}
}
----------------------------------------------------------------------------
interface Interf {
public int squareIt(int n);
}
class Demo implements Interf {
public int squareIt(int n) {
return n*n;
}
}
class Test {
public static void main(String[] args) {
Interf i = new Demo();
System.out.print(i.squareIt(4));
System.out.print(i.squareIt(5));
}
}
------------------------------------------------------------------------------
interface Interf {
public int squareIt(int n);
}
class Test {
public static void main(String[] args) {
Interf i = n -> n*n;
System.out.print(i.squareIt(4));
System.out.print(i.squareIt(5));
}
}
-------------------------------------------------------------------------------
@FunctionalInterface
interface Cab{
 void bookCab(); //by default it is public abstract void bookCab() 
}
/*
class UberX implements Cab{
 public void bookCab(){
  System.out.println("UberX Booked !! Arriving Soon !!");
 }
}
*/
public class LambdaApp{
 public static void main(String[] args){
  //1.
  //Cab cab = new UberX();
  //cab.bookCab();
  /*
  2. Anonymous Class Implementation 
  Cab cab = new Cab(){
   @Override
   public void bookCab(){
    System.out.println("UberX Booked !! Arriving Soon !!");
   }
  };
  cab.bokkCab(); 
  */
  //3. Using a Lambda Expression
  Cab cab = () -> {
   System.out.println("UberX Booked !! Arriving Soon !!");
  }
 }
}
---------------------------------------------------------------------------------
class Test{
public static int squareIt(int n){
return n*n;
}
public static void main(String[] args){
System.out.println("The Square of 4: "+squareIt(4))
System.out.println("The Square of 5: "+squareIt(5))
}
}
-------------------------------------------------------------------------
import java.util.function.*;
class Test{
public static void main(String[] args){
Function<Integer,Integer> f = i -> i*i;
System.out.println("The Square of 4: "+f.apply(4))
System.out.println("The Square of 5: "+f.apply(5))
}
}
-------------------------------------------------------------------------
import java.util.function.*;
class Test{
public static void main(String[] args){
Predicate<Integer> p = i -> i%2 == 0:
System.out.println(p.test(4));
System.out.println(p.test(5))
}
}


Java Lambda Expression Example: Multiple Statements
===================================================
@FunctionalInterface  
interface Sayable{  
    String say(String message);  
}  
  
public class LambdaExpressionExample8{  
    public static void main(String[] args) {  
      
        // You can pass multiple statements in lambda expression  
        Sayable person = (message)-> {  
            String str1 = "I would like to say, ";  
            String str2 = str1 + message;   
            return str2;  
        };  
            System.out.println(person.say("time is precious."));  
    }  
}


Java Lambda Expression Example: Foreach Loop
=============================================
import java.util.*;  
public class LambdaExpressionExample7{  
    public static void main(String[] args) {  
          
        List<String> list=new ArrayList<String>();  
        list.add("ankit");  
        list.add("mayank");  
        list.add("irfan");  
        list.add("jai");  
          
        list.forEach(  
            (n)->System.out.println(n)  
        );  
    }  
}


Java Lambda Expression Example: Creating Thread
================================================
public class LambdaExpressionExample9{  
    public static void main(String[] args) {  
      
        //Thread Example without lambda  
        Runnable r1=new Runnable(){  
            public void run(){  
                System.out.println("Thread1 is running...");  
            }  
        };  
        Thread t1=new Thread(r1);  
        t1.start();  
        //Thread Example with lambda  
        Runnable r2=()->{  
                System.out.println("Thread2 is running...");  
        };  
        Thread t2=new Thread(r2);  
        t2.start();  
    }  
}


Java Lambda Expression Example: Comparator
===========================================
import java.util.ArrayList;  
import java.util.Collections;  
import java.util.List;  
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class LambdaExpressionExample10{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
          
        //Adding Products  
        list.add(new Product(1,"HP Laptop",25000f));  
        list.add(new Product(3,"Keyboard",300f));  
        list.add(new Product(2,"Dell Mouse",150f));  
          
        System.out.println("Sorting on the basis of name...");  
  
        // implementing lambda expression  
        Collections.sort(list,(p1,p2)->{  
        return p1.name.compareTo(p2.name);  
        });  
        for(Product p:list){  
            System.out.println(p.id+" "+p.name+" "+p.price);  
        }  
  
    }  
}


Java Lambda Expression Example: Filter Collection Data
=======================================================

import java.util.ArrayList;  
import java.util.List;  
import java.util.stream.Stream;   
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class LambdaExpressionExample11{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
        list.add(new Product(1,"Samsung A5",17000f));  
        list.add(new Product(3,"Iphone 6S",65000f));  
        list.add(new Product(2,"Sony Xperia",25000f));  
        list.add(new Product(4,"Nokia Lumia",15000f));  
        list.add(new Product(5,"Redmi4 ",26000f));  
        list.add(new Product(6,"Lenevo Vibe",19000f));  
          
        // using lambda to filter data  
        Stream<Product> filtered_data = list.stream().filter(p -> p.price > 20000);  
          
        // using lambda to iterate through collection  
        filtered_data.forEach(  
                product -> System.out.println(product.name+": "+product.price)  
        );  
    }  
}


Java Lambda Expression Example: Event Listener
===============================================
import javax.swing.JButton;  
import javax.swing.JFrame;  
import javax.swing.JTextField;  
public class LambdaEventListenerExample {  
    public static void main(String[] args) {  
        JTextField tf=new JTextField();  
        tf.setBounds(50, 50,150,20);  
        JButton b=new JButton("click");  
        b.setBounds(80,100,70,30);  
          
        // lambda expression implementing here.  
        b.addActionListener(e-> {tf.setText("hello swing");});  
          
        JFrame f=new JFrame();  
        f.add(tf);f.add(b);  
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
        f.setLayout(null);  
        f.setSize(300, 200);  
        f.setVisible(true);  
  
    }  
  
}  


Lambda as an Object:
====================
public interface LambdaComparator{
puiblic boolean compare(int a1, int a2);
}

LambdaComparator myComparator = (a1, a2) -> return a1 > a2;
boolean resutl = myComparator.compare(2, 5);


Lambda Variable Capture:
========================
Local Variable
--------------
String myStr = "Welcome to Edureka!"
MyLambda dis = (chars) -> {
return myStr + ":" new String(chars);
};

Instance Variable
-----------------
public class LambdaStaticConsumerDemo{
private String str = "Lambda Consumer";
public void attach(LambdaStaticProducerDemo eventProd){
eventProd.listen(e -> {
System.out.println(this.str);
});
}
}

Static Variables
----------------
public class LambdaStaticConsumerDemo{
private static String myStaticVar = "Edureka!";
public void attach(LambdaStaticProducerDemo eventProd){
eventProd.listen(e -> {
System.out.println(myStaticVar);
});
}
}

--------------------------------------------------------------------------

@FunctionalInterface
interface Cab{
 void bookCab(); //by default it is public abstract void bookCab() 
}
/*
class UberX implements Cab{
 public void bookCab(){
  System.out.println("UberX Booked !! Arriving Soon !!");
 }
}
*/
public class LambdaApp{
int instanceVar = 10;
static int sVar = 100;
public static void main(String[] args){
  //1.
  //Cab cab = new UberX();
  //cab.bookCab();
  //2. Anonymous Class Implementation
  /* Cab cab = new Cab(){
   @Override
   public void bookCab(){
    System.out.println("UberX Booked !! Arriving Soon !!");
   }
  };
  cab.bokkCab(); */
 }
 //3. Using a Lambda Expression
  Cab cab = () -> {
int localVar = 1000;
   System.out.println("UberX Booked !! Arriving Soon !!");
System.out.prntln("instanceVar is: "+instanceVar);
System.out.prntln("Local var is: "+localVar);
System.out.prntln("Static Variable is: "+sVar);
  };
}


Method References as Lambdas:
=============================
1. Static Method Reference
2. Parameter Method Reference
3. Instance Method Reference
4. Constructor Method Reference

1. Static Method Reference:
---------------------------
public interface Display{
public int show(String s1, String s2);
}

public class Test{
public static int doShow(String s1, String s2){
return s1.lastIndexOf(s2);
}
}

Diplay disp = Test::doShow;

2. Parameter Method Reference:
------------------------------
public interface Display{
public int show(String s1, String s2);
}

Display disp = String::indexOf;

3. Instance Method Reference:
-----------------------------
public interface Deserializer{
public int deserialize(String v1);
}

public class StringConverter{
public int converToInt(String v1){
return Integer.valueOf(v1);
}
}

StringConverter strConv = new StringConverter();
deserializer deserializer = strConv::convertToInt;

4. Constructor Method Reference:
--------------------------------
public interface Factory{
public String create(char[] val);
}

Factory fact = String::new;

----------------------------------------------------------------------------------
interface Calculator {
void add(int num1, int num2);
public void letsAdd(int num1, int num2);
}
class Calc{
public static void addSomething(int num1, int num2) {
System.out.println(num1+" and "+num2+" addition is: "+(num1+num2));
}
public static void letsAdd(int num1, int num2) {
System.out.println(num1+" and "+num2+" addition is: "+(num1+num2));
}
}
@FunctionalInterface
interface Messenger {
Message getMessage(String msg);
}
class Message {
Message(String msg) {
System.out.println(">> Message is: "+msg);
}
}
public class MethodReferencesApp {
public static void main(String[] args) {
//Calc.addSomething(10, 20);

//1. Reference to a Static Method 
Calculator cRef = Calc::addSomething;
cRef.add(11, 14);

//2. Reference to a non static method or Instance Method
Calc calc = new Calc();
Calculator cRef = calc::letsAdd;
cRef.add(12, 23);

//3. Reference to a Constructor
Messenger mRef = Messenger::new;
mRef.getMessage("Search the candle rather than cursing the darkness!!");

}
}















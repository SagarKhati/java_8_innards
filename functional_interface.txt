Functional Interface:
=====================
An interface that contains Single Abstract Method.
It can have any number of default, static methods but can contain only one abstract method.
It can also declare methods of object class.
@FunctionalInterface annotation is added to mark it as functional interface
They have a single functionality to exhibit
There are many functional interfaces defined in java.util.function package
Some of the significant ones are Consumer, Supplier, Function and Predicate.
Consumer --> void accept()
Supplier --> get()
Function --> apply()
Predicate --> boolean test()

Runnable --> run()
Comparable --> compareTo()
Comparator --> compare()
ActionListener --> actionPerformed()
Callable --> call()


ex1:
====
@FunctionalInterface
interface Interf {
	public void m1();
	
	default void m2() {
	
	}
	default void m3() {
	
	}

	public static void m4() {
	
	}
	public static void m5() {
	
	}
	
	int hashCode();  
    	String toString();  
    	boolean equals(Object obj); 
}
--------------------------------------
@FunctionalInterface  
interface sayable{  
    void say(String msg);  
}  
public class FunctionalInterfaceExample implements sayable{  
    public void say(String msg){  
        System.out.println(msg);  
    }  
    public static void main(String[] args) {  
        FunctionalInterfaceExample fie = new FunctionalInterfaceExample();  
        fie.say("Hello there");  
    }  
}
------------------------------------------------------------------------------------
@FunctionalInterface  
interface sayable{  
    void say(String msg);   // abstract method  
    // It can contain any number of Object class methods.  
    int hashCode();  
    String toString();  
    boolean equals(Object obj);  
}  
public class FunctionalInterfaceExample2 implements sayable{  
    public void say(String msg){  
        System.out.println(msg);  
    }  
    public static void main(String[] args) {  
        FunctionalInterfaceExample2 fie = new FunctionalInterfaceExample2();  
        fie.say("Hello there");  
    }  
}


Below example uses predicate functional interface.:
====================================================
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
public class App {
   public static void main(String args[]){
      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
      System.out.println("Print even numbers:");
      eval(list, n-> n%2 == 0 );
   }
   public static void eval(List<Integer> list, Predicate<Integer> predicate) {
      for(Integer n: list) {		
         if(predicate.test(n)) {
            System.out.println(n + " ");
         }
      }
   }
}


Functional Interface wrt Inheritance:
=====================================
@FunctionalInterface
interface A {
public void m1();
}
@FunctionalInterface
interface B extends A {
}
-------------------------------
@FunctionalInterface
interface A {
public void m1();
}
@FunctionalInterface
interface B extends A {
public void m1();
}
-------------------------------
@FunctionalInterface
interface A {
public void m1();
}
@FunctionalInterface
interface B extends A {
public void m2();        ---> invalid
}
----------------------------------------
@FunctionalInterface
interface A {
public void m1();
}
interface B extends A {
public void m2();     
}
-----------------------------------------
interface A {
default void m1() {
}
}
@FunctionalInterface
interface B extends A {
public void m2();     
}
public class Test {
public static void main(String[] args){
}
}





Java 8 Features
================
Java 8 is packed with exciting features at both the JVM and language level.
Backed by simple code samples, you will learn
 How to use lambda expressions
 Default interface methods
 Method references and
 Type/repeatable annotations.
At the end of the course, you'll be familiar with the most recent API changes like
 Streams
 Functional interfaces
 The new Date API and
 Other features.


Why Java 8?
============
Java 8 improves overall application performance with little work or tuning in many cases.
 Lambda expressions, the Streams API, and new methods added to existing classes improve productivity.
 Java 8 Optional type gives developers flexibility when dealing with null values, reducing the likelihood of NullPointerExceptions
 Fewer Lines of Code: Java is generally accused of being little heavy on boilerplate code. Java 8 addresses them by embracing a more functional style for new APIs, focusing on what is to be achieved rather than how we do that.
 Easy to Parallelize: JVM splits any operation into separate jobs and use fork/join to run them on multiple cores with simple API additions.


Java 7 Vs Java 8
=================
Java 7 - Only Sequential execution of streams possible
Java 8 - Parallel execution made possible
--------------------------------------------------------
Java 7 - Rhino Javascript Engine used
Java 8 - New Nashorn Javascript Engine used
----------------------------------------------------------------
Java 7 - No method implementation can be added to Interfaces
Java 8 - Static and Default methods can be added to Interfaces
---------------------------------------------------------------------
Java 7 - Developer has to write chunk of code using anonymous class
Java 8 - Huge reduction in code when lambda expressions , method references and functional interfaces are used
---------------------------------------------------------------------------------
Java 7 - java.util.Date is not thread safe
Java 8 - New date-time api is immutable and does not have setter methods
----------------------------------------------------------------------------------
Java 7 - No auto handling of time zone issues
Java 8 - Time zone handling is taken care in the new API with temporal adjusters and additional calendar support added
--------------------------------------------------------------------------------------






